/*
 * File Auto-Generated by AcceptanceMark - DO NOT EDIT
 * input file: DateFormatting.md
 * generated file: DateFormatting_DateFormattingTests.swift
 *
 * -- Test Specification -- 
 *
 * ## Date Formatting
 * | year:Int | month:Int | day:Int | hour:Int | minute:Int | second:Int | language | dateStyle    || localizedDate            |
 * | ---------| --------- | ------- | -------- | ---------- | ---------- | -------- | --------- |---| ------------------------ |
 * |     2016 |         9 |      16 |       17 |         30 |         15 | en       | short        || 9/16/16, 5:30 PM         |
 * |     2016 |         9 |      16 |       17 |         30 |         15 | fr       | short        || 16/09/2016 17:30         |
 * |     2016 |         9 |      16 |       17 |         30 |         15 | it       | short        || 16/09/16, 17:30          |
 * |     2016 |         9 |      16 |       17 |         30 |         15 | en       | medium       || Sep 16, 2016, 5:30:15 PM |
 * |     2016 |         9 |      16 |       17 |         30 |         15 | fr       | medium       || 16 sept. 2016 à 17:30:15 |
 * |     2016 |         9 |      16 |       17 |         30 |         15 | it       | medium       || 16 set 2016, 17:30:15    |
 */

//// Don't forget to create a test runner: 
//
//class DateFormatting_DateFormattingRunner: DateFormatting_DateFormattingRunnable {
//
//	func run(input: DateFormatting_DateFormattingInput) throws -> DateFormatting_DateFormattingOutput {
//		return DateFormatting_DateFormattingOutput(<#parameters#>)
//	}
//}

import XCTest

struct DateFormatting_DateFormattingInput {
	let year: Int
	let month: Int
	let day: Int
	let hour: Int
	let minute: Int
	let second: Int
	let language: String
	let dateStyle: String
}

struct DateFormatting_DateFormattingOutput: Equatable {
	let localizedDate: String
}

protocol DateFormatting_DateFormattingRunnable {
	func run(input: DateFormatting_DateFormattingInput) throws -> DateFormatting_DateFormattingOutput
}
class DateFormatting_DateFormattingTests: XCTestCase {

	var testRunner: DateFormatting_DateFormattingRunnable!

	override func setUp() {
		// MARK: Implement the DateFormatting_DateFormattingRunner() class!
		testRunner = DateFormatting_DateFormattingRunner()
	}

	func testDateFormatting_row1() {
		let input = DateFormatting_DateFormattingInput(year: 2016, month: 9, day: 16, hour: 17, minute: 30, second: 15, language: "en", dateStyle: "short")
		let expected = DateFormatting_DateFormattingOutput(localizedDate: "9/16/16, 5:30 PM")
		let result = try! testRunner.run(input: input)
		XCTAssertEqual(expected, result)
	}

	func testDateFormatting_row2() {
		let input = DateFormatting_DateFormattingInput(year: 2016, month: 9, day: 16, hour: 17, minute: 30, second: 15, language: "fr", dateStyle: "short")
		let expected = DateFormatting_DateFormattingOutput(localizedDate: "16/09/2016 17:30")
		let result = try! testRunner.run(input: input)
		XCTAssertEqual(expected, result)
	}

	func testDateFormatting_row3() {
		let input = DateFormatting_DateFormattingInput(year: 2016, month: 9, day: 16, hour: 17, minute: 30, second: 15, language: "it", dateStyle: "short")
		let expected = DateFormatting_DateFormattingOutput(localizedDate: "16/09/16, 17:30")
		let result = try! testRunner.run(input: input)
		XCTAssertEqual(expected, result)
	}

	func testDateFormatting_row4() {
		let input = DateFormatting_DateFormattingInput(year: 2016, month: 9, day: 16, hour: 17, minute: 30, second: 15, language: "en", dateStyle: "medium")
		let expected = DateFormatting_DateFormattingOutput(localizedDate: "Sep 16, 2016, 5:30:15 PM")
		let result = try! testRunner.run(input: input)
		XCTAssertEqual(expected, result)
	}

	func testDateFormatting_row5() {
		let input = DateFormatting_DateFormattingInput(year: 2016, month: 9, day: 16, hour: 17, minute: 30, second: 15, language: "fr", dateStyle: "medium")
		let expected = DateFormatting_DateFormattingOutput(localizedDate: "16 sept. 2016 à 17:30:15")
		let result = try! testRunner.run(input: input)
		XCTAssertEqual(expected, result)
	}

	func testDateFormatting_row6() {
		let input = DateFormatting_DateFormattingInput(year: 2016, month: 9, day: 16, hour: 17, minute: 30, second: 15, language: "it", dateStyle: "medium")
		let expected = DateFormatting_DateFormattingOutput(localizedDate: "16 set 2016, 17:30:15")
		let result = try! testRunner.run(input: input)
		XCTAssertEqual(expected, result)
	}

}

func == (lhs: DateFormatting_DateFormattingOutput, rhs: DateFormatting_DateFormattingOutput) -> Bool {
	return
		lhs.localizedDate == rhs.localizedDate
}
