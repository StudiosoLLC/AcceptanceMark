/*
 * File Auto-Generated by AcceptanceMark - DO NOT EDIT
 * input file: sample.md
 * generated file: sample_ImageLoading.swift
 *
 * -- Test Specification -- 
 *
 * ## Image Loading
 * | name:String   || loaded:Bool  |
 * | ------------- || ------------ |
 * | available.png || true         |
 * | missing.png   || false        |
 */

//// Don't forget to create a test runner: 
//
//class sample_ImageLoadingRunner : sample_ImageLoadingRunnable {
//
//	func run(input: sample_ImageLoadingInput) throws -> sample_ImageLoadingOutput {
//		return sample_ImageLoadingOutput(<#parameters#>)
//	}
//}

import XCTest

struct sample_ImageLoadingInput {
	let name: String
}

struct sample_ImageLoadingOutput: Equatable {
	let loaded: Bool
}

protocol sample_ImageLoadingRunnable {
	func run(input: sample_ImageLoadingInput) throws -> sample_ImageLoadingOutput
}
class sample_ImageLoadingTests: XCTestCase {

	var testRunner: sample_ImageLoadingRunnable!

	override func setUp() {
		// MARK: Implement the sample_ImageLoadingTestRunner() class!
		testRunner = sample_ImageLoadingRunner()
	}

	func testImageLoading_0() {
		let input = sample_ImageLoadingInput(name: "available.png")
		let expected = sample_ImageLoadingOutput(loaded: true)
		let result = try! testRunner.run(input: input)
		XCTAssertEqual(expected, result)
	}

	func testImageLoading_1() {
		let input = sample_ImageLoadingInput(name: "missing.png")
		let expected = sample_ImageLoadingOutput(loaded: false)
		let result = try! testRunner.run(input: input)
		XCTAssertEqual(expected, result)
	}

}

func == (lhs: sample_ImageLoadingOutput, rhs: sample_ImageLoadingOutput) -> Bool {
	return
		lhs.loaded == rhs.loaded
}
